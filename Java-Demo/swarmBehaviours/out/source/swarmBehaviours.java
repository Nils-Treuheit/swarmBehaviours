/* autogenerated by Processing revision 1277 on 2021-10-25 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.ArrayList;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class swarmBehaviours extends PApplet {



ArrayList<Drone> drones = new ArrayList<Drone>();
//AttRep_Behavior behavior;
ConSteer_Behavior behavior;
int ticks = 0;

 public void setup() 
{
  /* size commented out by preprocessor */;
  
  for(int it=0; it<100; ++it)
    //drones.add(new Drone(random(width), random(height)));
    drones.add(new Drone(random(width), random(height),8));
  
  //behavior = new AttRep_Behavior(drones);
  behavior = new ConSteer_Behavior(drones,8);
  behavior.setup();
}

 public void mousePressed()
{ 
  //behavior.mousePressed()
}

 public void draw() 
{
  background(51);
  
  if(ticks==448)
  {
    ticks = 0;
    behavior.update();
  }

  behavior.draw();
  
  stroke(255);
  strokeWeight(4);
  for(Drone drone:drones) 
  {
    //beahvior.primitive_attRep(drone);
    //behavior.advanced_attRep(drone);
    behavior.conSteer(drone);
    
    drone.update();
    drone.show();
  }
  ++ticks;
}
class AttRep_Behavior
{
  ArrayList<Drone> drones;
  ArrayList<PVector> attractors = new ArrayList<PVector>();
  ArrayList<PVector> repellPoints = new ArrayList<PVector>();
  float comfy_dist = 17;
  float perlimiter = 64.25f;

  AttRep_Behavior(ArrayList<Drone> drones)
  { this.drones = drones; }

   public void setup()
  {
    for(int it = 0; it < 8; ++it)
      this.attractors.add(new PVector(random(width), random(height)));
  
    for(int it = 0; it < 4; ++it)
      this.repellPoints.add(new PVector(random(width), random(height)));
  }

   public void mousePressed(){ this.attractors.add(new PVector(mouseX, mouseY)); }
  
   public void update()
  {
    for(int it = 0; it < 4; ++it){
      this.attractors.remove(0);
      this.attractors.add(new PVector(random(width), random(height)));
    }
    for(int it = 0; it < 2; ++it){
      this.repellPoints.remove(0);
      this.repellPoints.add(new PVector(random(width), random(height)));
    }
  }

   public void draw()
  {
    stroke(0, 255, 0);
    strokeWeight(8);
    for (PVector attractor:this.attractors)
      point(attractor.x, attractor.y);
      
    stroke(255, 0, 0);
    strokeWeight(8);
    for (PVector repellPoint:this.repellPoints)
      point(repellPoint.x, repellPoint.y);
  }

   public void primitive_attRep(Drone drone)
  {
    for(PVector attractor:this.attractors)
      drone.primitive_attraction(attractor,comfy_dist,10);
    for(PVector repellPoint:this.repellPoints)
      drone.primitive_repulsion(repellPoint,comfy_dist,20);
    for(Drone other:this.drones)
      if(other!=drone) drone.primitive_attraction(other.pos,2*comfy_dist,1);
    for(Drone other:this.drones)
      if(other!=drone) drone.primitive_repulsion(other.pos,1.2f*comfy_dist,5);  
  }

   public void advanced_attRep(Drone drone)
  {
    for(PVector attractor:this.attractors)
      drone.linear_attraction(attractor,8); 
    for(PVector repellPoint:this.repellPoints)
      drone.simpleExponential_repulsion(repellPoint,perlimiter,175);
    for(Drone other:this.drones)
      if(other!=drone) drone.comfy_attraction(other.pos,comfy_dist,3);
    for(Drone other:this.drones)
      if(other!=drone) drone.complexExponential_repulsion(other.pos,perlimiter,3,15);
  }
};
class ConSteer_Behavior
{
    ArrayList<Drone> drones;
    ArrayList<PVector> goals = new ArrayList<PVector>();
    ArrayList<PVector> dangers = new ArrayList<PVector>();
    ArrayList<PVector> RAY_DIRS = new ArrayList<PVector>();
    float SECTOR_COS_SIM;
    
    ConSteer_Behavior(ArrayList<Drone> drones, int directions)
    { 
        this.drones = drones; 
        for(int it=0; it<directions; ++it)
        {
          float angle = it * TWO_PI/directions;
          this.RAY_DIRS.add(PVector.fromAngle(angle));
        }
        this.SECTOR_COS_SIM = (this.RAY_DIRS.get(0).dot(this.RAY_DIRS.get(1))/(this.RAY_DIRS.get(0).mag()*this.RAY_DIRS.get(1).mag()))/2;
    }

     public void setup()
    {
      for(int it = 0; it < 8; ++it)
        this.goals.add(new PVector(random(width), random(height)));
    
      for(int it = 0; it < 4; ++it)
        this.dangers.add(new PVector(random(width), random(height)));
    }

     public void mousePressed(){ this.goals.add(new PVector(mouseX, mouseY)); }
    
     public void update()
    {
      for(int it = 0; it < 4; ++it){
        this.goals.remove(0);
        this.goals.add(new PVector(random(width), random(height)));
      }
      for(int it = 0; it < 2; ++it){
        this.dangers.remove(0);
        this.dangers.add(new PVector(random(width), random(height)));
      }
    }

     public void draw()
    {
      stroke(0, 255, 0);
      strokeWeight(8);
      for (PVector goal:this.goals)
        point(goal.x, goal.y);

      stroke(255, 0, 0);
      strokeWeight(8);
      for (PVector danger:this.dangers)
        point(danger.x, danger.y);
    }

     public void conSteer(Drone drone)
    {
      for(int idx=0; idx<RAY_DIRS.size(); ++idx)
      {
         ArrayList<PVector> intrests = new ArrayList<PVector>();
         ArrayList<PVector> members = new ArrayList<PVector>();
         ArrayList<PVector> noFlyZones = new ArrayList<PVector>();
         for(PVector goal: this.goals)
         {
             float cosSim = this.RAY_DIRS.get(idx).dot(goal)/(this.RAY_DIRS.get(idx).mag()*goal.mag());
             if(cosSim <= this.SECTOR_COS_SIM) intrests.add(goal);
         }
         for(Drone other: this.drones)
         {
             if(other.pos != drone.pos)
             {
               float cosSim = this.RAY_DIRS.get(idx).dot(other.pos)/(this.RAY_DIRS.get(idx).mag()*other.pos.mag());
               if(cosSim <= this.SECTOR_COS_SIM) members.add(other.pos); 
             }
         }
         for(PVector danger: this.dangers)
         {
             float cosSim = this.RAY_DIRS.get(idx).dot(danger)/(this.RAY_DIRS.get(idx).mag()*danger.mag());
             if(cosSim <= this.SECTOR_COS_SIM) noFlyZones.add(danger); 
         }
         drone.create_context_segment(idx, intrests, noFlyZones, members);
      }
      drone.context_steering();
    }

}
class Drone {
  ArrayList<PVector> prev;
  PVector pos;
  PVector vel;
  PVector acc;
  final float G = 1.98f;
  

  ArrayList<ArrayList<PVector>> contextMaps = new ArrayList<ArrayList<PVector>>();
  ArrayList<PVector> RAY_DIRS;
  PVector prevForce = new PVector();
  int DIRECTIONS = 8;
  final int GOALS = 0;
  final int DANGERS = 1;
  final int MEMBERS = 2;
  final float MAX_SPEED = 3;

  Drone(float x, float y) 
  {
    this.pos = new PVector(x, y);
    this.prev = new ArrayList<PVector>();
    this.prev.add(new PVector(x, y));
    
    this.vel = PVector.random2D();
    this.vel.setMag(random(0, 3));
    this.acc = new PVector();
  }

  Drone(float x, float y, int directions) 
  {
    this.pos = new PVector(x, y);
    this.prev = new ArrayList<PVector>();
    this.prev.add(new PVector(x, y));
    
    this.vel = new PVector();
    this.acc = new PVector();

    this.DIRECTIONS = directions;
    this.RAY_DIRS = new ArrayList<PVector>();
    ArrayList<PVector> goals = new ArrayList<PVector>();
    ArrayList<PVector> members = new ArrayList<PVector>();
    ArrayList<PVector> noFlyZone  = new ArrayList<PVector>();

    for(int it=0; it<this.DIRECTIONS; ++it)
    {
      float angle = it * TWO_PI/this.DIRECTIONS;
      this.RAY_DIRS.add(PVector.fromAngle(angle));
      goals.add(new PVector());
      noFlyZone.add(new PVector());
      members.add(new PVector());
    }

    this.contextMaps.add(goals);
    this.contextMaps.add(noFlyZone);
    this.contextMaps.add(members);
  }

   public void update() 
  {
    vel.add(acc);
    vel.limit(MAX_SPEED);
    pos.add(vel);
    acc.mult(0);
  }

   public void show() 
  {
    stroke(255, 255);
    strokeWeight(6);
    point(this.pos.x, this.pos.y);
    
    strokeWeight(2);
    stroke(255, 25);
    line(this.pos.x, this.pos.y, 
    this.prev.get(this.prev.size()-1).x, this.prev.get(this.prev.size()-1).y);
    
    stroke(255, 5);
    for(int it=this.prev.size()-1; it>0; --it)
      line(this.prev.get(it).x,this.prev.get(it).y,
      this.prev.get(it-1).x,this.prev.get(it-1).y);
    
    this.prev.add(new PVector(this.pos.x,this.pos.y));
    if(this.prev.size()>100) this.prev.remove(0);
  }

   public void create_context_segment(int dir, ArrayList<PVector> goals, ArrayList<PVector> noFlyZone, ArrayList<PVector> members)
  {
    PVector force = new PVector();
    for(PVector goal:goals) force = force.add(invGausain_Attraction(goal));
    this.contextMaps.get(GOALS).set(dir,force.copy());
    force = new PVector();
    for(PVector member:members) force = force.add(gausain_AttRep(member));
    this.contextMaps.get(MEMBERS).set(dir,force.copy());
    force = new PVector();
    for(PVector danger:noFlyZone) force = force.add(limExp_Repulsion(danger));
    this.contextMaps.get(DANGERS).set(dir,force.copy());
  }

   public void context_steering()
  {
    ArrayList<PVector> forces = new ArrayList<PVector>();
    for(int idx=0; idx<this.DIRECTIONS; ++idx)
    {
      PVector force = new PVector();
      force = this.contextMaps.get(GOALS).get(idx).mult(2);
      force = force.add(this.contextMaps.get(MEMBERS).get(idx)).mult(1);
      force = force.add(this.contextMaps.get(DANGERS).get(idx).mult(1));
      float cosSim = this.RAY_DIRS.get(idx).dot(force)/(this.RAY_DIRS.get(idx).mag()*force.mag());
      if(cosSim < 0) force = new PVector();
      else if(this.prevForce.mag()!=0)
      { 
        cosSim = this.RAY_DIRS.get(idx).dot(this.prevForce)/(this.RAY_DIRS.get(idx).mag()*this.prevForce.mag());
        if(cosSim < 0) force = force.mult(map(cosSim,-1.0f,0.0f,0.5f,1.0f));
      }
      forces.add(force);
    }

    int maxIdx = 0;
    float maxMag = forces.get(0).mag();
    for(int idx=0; idx<forces.size(); ++idx) 
      if(forces.get(idx).mag()>maxMag) 
      {
        maxMag = forces.get(idx).mag();
        maxIdx = idx;
      }

    int rNIdx = (maxIdx+1 + this.DIRECTIONS) % this.DIRECTIONS;
    int lNIdx = (maxIdx-1 + this.DIRECTIONS) % this.DIRECTIONS;
    int neighborIdx = lNIdx;
    float neighborMag = forces.get(lNIdx).mag();
    if(forces.get(rNIdx).mag()>forces.get(lNIdx).mag())
    {
      neighborIdx = rNIdx;
      neighborMag = forces.get(rNIdx).mag();
    }

    PVector force = this.RAY_DIRS.get(maxIdx).copy().setMag(MAX_SPEED);
    float mag = neighborMag/maxMag-0.5f;
    if(mag>0) force = force.add(this.RAY_DIRS.get(neighborIdx).copy().setMag(MAX_SPEED*mag));
    force.setMag(MAX_SPEED);  
    this.prevForce = force;
    this.acc.add(force);
  }

   public PVector limExp_Repulsion(PVector target)
  {
    final float LIMIT = 40;
    final float SIGMA = 3.85f;

    PVector force = PVector.sub(target, this.pos);
    float d = force.mag();
    float strength;
    d = constrain(d, 0, LIMIT);
    if (d<11) strength = G * (0.5f*d - LIMIT) / SIGMA;
    else strength = -1*exp(-1*(G * ((LIMIT/8)*log(d) - (LIMIT/2-1.5f))/SIGMA));
    force = force.normalize();
    force = force.mult(strength);
    return force;
  }

   public PVector gausain_AttRep(PVector target)
  {
    final float LIMIT = 30;
    final float SIGMA = 7.219f;
    final float MEAN = 7.5f;

    PVector force = PVector.sub(target, this.pos);
    float d = force.mag();
    d = constrain(d, 0, LIMIT);
    float strength;
    if(d<5) strength = G*(d-5); //rep_close
    else if(d<14.5f) strength = G*(2*d-sq(d)/10-MEAN); //att_mid
    else strength = exp(G *(SIGMA-d/2)); //att_far
    force = force.normalize();
    force = force.mult(strength);
    return force;
  }
  
   public PVector invGausain_Attraction(PVector target)
  {
    final float LIMIT = 30;
    final float SIGMA = 5;
    final float MEAN = LIMIT/2;

    PVector force = PVector.sub(target, this.pos);
    float d = force.mag();
    d = constrain(d, 0.5f, LIMIT);
    float tanh_inv_gauss = (float)(Math.tanh(exp(sq(d-MEAN)/(2*sq(SIGMA)))/(SIGMA*sqrt(TWO_PI)))*10-0.25f);
    float quad_eq = sq(d)-(MEAN*d)-LIMIT;
    float strength = (MEAN/10)*((G * tanh_inv_gauss) / (LIMIT/10) - quad_eq / (4*LIMIT))-(MEAN/100);
    force = force.normalize();
    force = force.mult(strength);
    return force;
  }

   public void primitive_attraction(PVector target, float perlimiter, int multiplier) 
  {
    PVector force = PVector.sub(target, this.pos);
    float d = force.mag();
    d = constrain(d, 1, 25);
    if(d > perlimiter)
    {
      float strength = (G*multiplier) / (d * d);
      force.setMag(strength); 
      this.acc.add(force);
    }
  }
  
   public void primitive_repulsion(PVector target, float perlimiter, int multiplier)
  {
    PVector force = PVector.sub(target, this.pos);
    float d = force.mag();
    d = constrain(d, 1, 25);
    if(d<perlimiter)
    {
      float strength = (G*multiplier) / (d * d);
      force.setMag(strength);
      this.acc.sub(force);
    }
  }
  
   public void linear_attraction(PVector target, int multiplier) 
  {
    PVector force = PVector.sub(target, this.pos);
    float d = force.mag();
    float strength = G*multiplier; 
    force.setMag(strength); 
    this.acc.add(force);
  }
  
   public void complexExponential_repulsion(PVector target, float perlimiter, int a, int b)
  {
    PVector force = PVector.sub(target, this.pos);
    float d = force.mag();
    float c = (perlimiter*perlimiter) * (float)Math.log(b/a);
    float strength = (G*b) * (float)Math.exp(-(d*d)/c);
    force.setMag(strength);
    this.acc.sub(force);
  }
  
   public void comfy_attraction(PVector target, float perlimiter, int multiplier) 
  {
    PVector force = PVector.sub(target, this.pos);
    float d = force.mag();
    float strength = (G*multiplier) * (d-perlimiter)/max(d,0.01f); 
    force.setMag(strength); 
    this.acc.add(force);
  }
  
   public void simpleExponential_repulsion(PVector target, float perlimiter, int multiplier)
  {
    PVector force = PVector.sub(target, this.pos);
    float d = force.mag();
    float strength = (G*multiplier) * (float)Math.exp(-(d*d)/(2*perlimiter*perlimiter));
    force.setMag(strength);
    this.acc.sub(force);
  }
};


  public void settings() { size(1200, 800); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "swarmBehaviours" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
